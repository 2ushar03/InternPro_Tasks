import redis
import time

r = redis.StrictRedis(host='localhost', port=6379, db=0)

def fetch_user_data_from_db(user_id):
    time.sleep(2)
    return f"User data for user {user_id}"

def get_user_data(user_id):
    cache_key = f"user:{user_id}"
    cached_data = r.get(cache_key)
    if cached_data:
        print(f"Cache Hit: Returning cached data for user {user_id}")
        return cached_data.decode('utf-8')
    
    print(f"Cache Miss: Fetching data for user {user_id} from database")
    user_data = fetch_user_data_from_db(user_id)
    r.setex(cache_key, 600, user_data)
    return user_data

def update_user_data(user_id, new_data):
    print(f"Updating user {user_id}'s data in the database")
    r.delete(f"user:{user_id}")
    print(f"Cache invalidated for user {user_id}")

def test_performance():
    start_time = time.time()
    for user_id in range(1, 6):
        print(get_user_data(user_id))
    end_time = time.time()
    print(f"Performance with caching: {end_time - start_time:.4f} seconds")
    
    r.flushdb()

    start_time = time.time()
    for user_id in range(1, 6):
        print(fetch_user_data_from_db(user_id))
    end_time = time.time()
    print(f"Performance without caching: {end_time - start_time:.4f} seconds")

if __name__ == "__main__":
    test_performance()

    update_user_data(2, "New data for user 2")

    print("\nAfter cache invalidation:")
    test_performance()
